import Ember from 'ember';

const {
  Component,
  computed,
  merge,
  String: {htmlSafe}
} = Ember;

import {renderToString, ParseError} from 'katex';

import layout from '../templates/components/katex-formula';

/**
 * @class KatexFormula
 * @extends Ember.Component
 * @ember component
 **/

export default Component.extend({

  // ----- Arguments -----

  /**
   * A formula to render
   *
   * @property formula
   * @type String
   * @required
   * @ember argument
   **/
  formula: null,

  /**
   * Whether to crash on parse errors
   *
   * @property throwOnError
   * @type Boolean
   * @default false
   * @ember argument
   **/
  throwOnError: false,

  /**
   * A color which unsupported commands are rendered in
   *
   * @property errorColor
   * @type String
   * @default #cc0000
   * @ember argument
   **/
  errorColor: '#cc0000',

  /**
   * Whether to display the formula in inline (false) or block (true) form
   *
   * @property displayMode
   * @type Boolean
   * @default false
   * @ember argument
   **/
  displayMode: false,


  // ----- Overridden properties -----

  /**
   * @property layout
   * @final
   **/
  layout,


  // ----- Computed properties -----

  /**
   * @proeprty options
   * @comupted throwOnError, errorColor, displayMode
   * @final
   **/
  options: computed(
    'throwOnError',
    'errorColor',
    'displayMode',
    function () {
      let result = {};

      const throwOnError = this.get('throwOnError');

      if (throwOnError != null) {
        merge(result, {throwOnError});
      }

      const errorColor = this.get('errorColor');

      if (errorColor != null) {
        merge(result, {errorColor});
      }

      const displayMode = this.get('displayMode');

      if (displayMode != null) {
        merge(result, {displayMode});
      }

      return result;
    }
  ),
  
  /**
   * HTML generated by KaTeX from `formula`
   *
   * @property renderedFormulaRaw
   * @type String
   * @final
   * @ember computed
   **/

  renderedFormulaRaw: computed(
    'formula',
    function () {
      const formula = this.get('formula');

      if (!formula) {
        return;
      }
      
      const options = this.get('options');

      let result;

      try {
        result = renderToString(formula, options);
      } catch (e) {
        if (
          !(
            this.get('catchErrors')
            && e instanceof ParseError
          )
        ) {
          throw e;
        }

        if (
          this.get('showErrors')
        ) {
          result = `<span class="katex-error">${e.message}</span>`;
        }
      }

      return result;
    }
  ),


  // ----- Computed property -----
  /**
   * `renderedFormulaRaw` wrapped into Ember.String.htmlSafe
   *
   * @property renderedFormulaHtmlSafe
   * @type String
   * @final
   * @ember computed
   **/

  renderedFormulaHtmlSafe: computed(
    'renderedFormulaRaw',
    function () {
      const renderedFormulaRaw = this.get('renderedFormulaRaw');
      return htmlSafe(renderedFormulaRaw);
    }
  )
});
